import base64
import logging
import os
import tempfile
from dateutil.relativedelta import relativedelta
from odoo import api, fields, models

import openpyxl as xl
from odoo import _, api, fields, models
from odoo.tools.float_utils import float_round
from openpyxl.styles import Alignment, Font
from openpyxl.utils import get_column_letter

BIG_FONT = Font(name='Arial', bold=True, size=15)
MID_FONT = Font(name='Arial', bold=True, size=12)
NORMAL_FONT = Font(name='Arial', size=12)
LEFT_ALIGN = Alignment(horizontal='left', vertical='center')
RIGHT_ALIGN = Alignment(horizontal='right', vertical='center')

DATE_FORMAT = '%d/%m/%Y'

_logger = logging.getLogger(__name__)

REPORT_COLS = [
    'Reference', 'Shipper', 'BL Number', 'AWB Number', 'Goods Description', 'INV Number', 'IDF Number',
    'Expected Date', 'Container Size', 'Packages', 'Weight', 'Entry Number', 'Status',
]

class FreightOrderReportWizard(models.TransientModel):
    _name = 'freight.order.report'
    _description = 'Freight Order Excel Report'

    date = fields.Date(string='Date', required=True, default=fields.Date.today())

    def generate_freight_order_report(self):
        wb = xl.Workbook()
        ws = wb.active
        filename = f'Freight Order Report - {self.date.strftime(DATE_FORMAT)}'
        orders = self.env['freight.order'].search(
            [('create_date', '>=', self.date), (('create_date', '<', self.date + relativedelta(days=1)))])

class ReportDownloadWizard(models.TransientModel):
    _name = 'excel.wizard'
    _description = 'Download Excel Forms'

    name = fields.Char('File Name', size=64)
    report = fields.Binary('Your Report', readonly=True)

    @api.model
    def create_xls(self):
        _, xls_path = tempfile.mkstemp(
            suffix='.xlsx', prefix='xlsreport.tmp.')
        return xls_path

    @api.model
    def save_xls_file(self, xls_path, message=None):
        if not message:
            message = f'A report has been generated by {self.env.user.name}'
        with open(xls_path, 'rb') as f:
            datas = base64.encodebytes(f.read())
            _logger.info(message)
            self.delete_tempfile(xls_path)
        return datas

    @api.model
    def delete_tempfile(self, path):
        try:
            os.unlink(path)
        except (OSError, IOError):
            _logger.error('Error when trying to remove file %s' % path)
