<?xml version="1.0"?>
<openerp>
  <data noupdate="1">
    <record id="ke_rule1" model="hr.salary.rule">
      <field name="name">Basic Pay</field>
      <field name="code">P001</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>  
      <field name="sequence">1</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.rem_type in ['monthly']
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result =  payslip.paid_amount
            ]]></field>
    </record>
    <record id="ke_rule2" model="hr.salary.rule">
      <field name="name">Basic Wage -PH</field>
      <field name="code">P002</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="sequence">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.rem_type in ['hourly']
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
PH_RATE = contract.wage
result = worked_days.PH.number_of_hours * PH_RATE
            ]]></field>
    </record>
    <record id="ke_rule3" model="hr.salary.rule">
      <field name="sequence">3</field>
      <field name="code">P003</field>
      <field name="name">Basic Wage -PD</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.rem_type in ['daily']
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
PD_RATE = contract.wage
result = worked_days.PD.number_of_days * PD_RATE
            ]]></field>
    </record>
    <record id="ke_rule4" model="hr.salary.rule">
      <field name="sequence">4</field>
      <field name="code">P004</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule5" model="hr.salary.rule">
      <field name="sequence">5</field>
      <field name="code">P005</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule6" model="hr.salary.rule">
      <field name="sequence">6</field>
      <field name="code">P006</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule7" model="hr.salary.rule">
      <field name="sequence">7</field>
      <field name="code">P007</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule8" model="hr.salary.rule">
      <field name="sequence">8</field>
      <field name="code">P008</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule9" model="hr.salary.rule">
      <field name="sequence">9</field>
      <field name="code">P009</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category1"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule10" model="hr.salary.rule">
      <field name="sequence">10</field>
      <field name="code">P010</field>
      <field name="name">Basic Pay</field>
      <field name="category_id" ref="ke_category2"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C001
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C001 ##Basic Pay Category
            ]]></field>
    </record>
    <record id="ke_rule11" model="hr.salary.rule">
      <field name="sequence">11</field>
      <field name="code">P011</field>
      <field name="name">Bonus</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule12" model="hr.salary.rule">
      <field name="sequence">12</field>
      <field name="code">P012</field>
      <field name="name">Commission</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule13" model="hr.salary.rule">
      <field name="sequence">13</field>
      <field name="code">P013</field>
      <field name="name">Overtime Allowances</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule14" model="hr.salary.rule">
      <field name="sequence">14</field>
      <field name="code">P014</field>
      <field name="name">Transport Allowances</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule15" model="hr.salary.rule">
      <field name="sequence">15</field>
      <field name="code">P015</field>
      <field name="name">Leave Pay</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule16" model="hr.salary.rule">
      <field name="sequence">16</field>
      <field name="code">P016</field>
      <field name="name">Directors Fee</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule17" model="hr.salary.rule">
      <field name="sequence">17</field>
      <field name="code">P017</field>
      <field name="name">House Allowances</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule18" model="hr.salary.rule">
      <field name="sequence">18</field>
      <field name="code">P018</field>
      <field name="name">Lump Sum Pay</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule19" model="hr.salary.rule">
      <field name="sequence">19</field>
      <field name="code">P019</field>
      <field name="name">Other Allowances</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule20" model="hr.salary.rule">
      <field name="sequence">20</field>
      <field name="code">P020</field>
      <field name="name">Global Income (Non Full Time Dir.)</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule21" model="hr.salary.rule">
      <field name="sequence">21</field>
      <field name="code">P021</field>
      <field name="name">Per Diem</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
# Per Diem above KSH 2000 is taxable

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule22" model="hr.salary.rule">
      <field name="sequence">22</field>
      <field name="code">P022</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule23" model="hr.salary.rule">
      <field name="sequence">23</field>
      <field name="code">P023</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule24" model="hr.salary.rule">
      <field name="sequence">24</field>
      <field name="code">P024</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category3"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.cash_allowances.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule25" model="hr.salary.rule">
      <field name="sequence">25</field>
      <field name="code">P025</field>
      <field name="name">Total Cash Allowances</field>
      <field name="category_id" ref="ke_category4"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C003
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C003 ##Cash Allowances Category
            ]]></field>
    </record>
    <record id="ke_rule26" model="hr.salary.rule">
      <field name="sequence">26</field>
      <field name="code">P026</field>
      <field name="name">Gross Pay (Basic + Allowances)</field>
      <field name="category_id" ref="ke_category5"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = True
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C001 + categories.C003 ##Basic Pay + Allowances
            ]]></field>
    </record>
    <record id="ke_rule27" model="hr.salary.rule">
      <field name="sequence">27</field>
      <field name="code">P027</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category5"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule28" model="hr.salary.rule">
      <field name="sequence">28</field>
      <field name="code">P028</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category5"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule29" model="hr.salary.rule">
      <field name="sequence">29</field>
      <field name="code">P029</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category5"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule30" model="hr.salary.rule">
      <field name="sequence">30</field>
      <field name="code">P030</field>
      <field name="name">Gross Pay</field>
      <field name="category_id" ref="ke_category6"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C005
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C005 ##Gross Pay Category
            ]]></field>
    </record>
    <record id="ke_rule31" model="hr.salary.rule">
      <field name="sequence">31</field>
      <field name="code">P031</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule32" model="hr.salary.rule">
      <field name="sequence">32</field>
      <field name="code">P032</field>
      <field name="name">Water</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule33" model="hr.salary.rule">
      <field name="sequence">33</field>
      <field name="code">P033</field>
      <field name="name">Electricity</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule34" model="hr.salary.rule">
      <field name="sequence">34</field>
      <field name="code">P034</field>
      <field name="name">Telephone</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule35" model="hr.salary.rule">
      <field name="sequence">35</field>
      <field name="code">P035</field>
      <field name="name">Servants</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule36" model="hr.salary.rule">
      <field name="sequence">36</field>
      <field name="code">P036</field>
      <field name="name">Security Services</field>
      <field name="category_id" ref="ke_category7"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)]))

            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in contract.benefits.search([('rule_id', '=',  rule.id), ('contract_id', '=', contract.id)])])
            ]]></field>
    </record>
    <record id="ke_rule37" model="hr.salary.rule">
      <field name="sequence">37</field>
      <field name="code">P037</field>
      <field name="name">Total Non Cash Benefits</field>
      <field name="category_id" ref="ke_category8"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C007
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C007 ##Sum of all non Cash benefits excluding motor vehicle and housing
            ]]></field>
    </record>
    <record id="ke_rule38" model="hr.salary.rule">
      <field name="sequence">38</field>
      <field name="code">P038</field>
      <field name="name">Motor Vehicle</field>
      <field name="category_id" ref="ke_category36"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.car ##compute only if employee has car benefit
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
RATE_OF_BENEFIT = 0.02
CAR_BENEFIT = 0.0
COMMISSIONER_RATE = 0.0
PRESCRIBED_RATE = 0.0
for car in contract.cars:
    if car.cost_type in ['Owned']:
        PRESCRIBED_RATE = RATE_OF_BENEFIT * car.cost_own
    if car.cost_type in ['Hired']:
        PRESCRIBED_RATE = car.cost_hire

### Determine the Commissioner’s fixed monthly rate based on CC rating and Body Type
    if car.body in ['cruiser']:
        COMMISSIONER_RATE = 7200.00
    if car.body in ['pickup'] and car.cc_rate <= 1750:
        COMMISSIONER_RATE = 3600.00
    if car.body in ['pickup'] and car.cc_rate > 1750:
        COMMISSIONER_RATE = 4200.00
    if car.body in ['saloon'] and car.cc_rate <= 1200:
        COMMISSIONER_RATE = 3600.00
    if car.body in ['saloon'] and car.cc_rate > 1200 and car.cc_rate <= 1500:
        COMMISSIONER_RATE = 4200.00
    if car.body in ['saloon'] and car.cc_rate > 1500 and car.cc_rate <= 1750:
        COMMISSIONER_RATE = 5800.00
    if car.body in ['saloon'] and car.cc_rate > 1750 and car.cc_rate <= 2000:
        COMMISSIONER_RATE = 7200.00
    if car.body in ['saloon'] and car.cc_rate > 2000 and car.cc_rate <= 3000:
        COMMISSIONER_RATE = 8600.00
    if car.body in ['saloon'] and car.cc_rate > 3000:
        COMMISSIONER_RATE = 14400.00
### The benefit should be taken as the higher of the Fixed monthly rate determined by the Commissioner and the prescribed rate of benefits.
    CAR_BENEFIT += max (COMMISSIONER_RATE, PRESCRIBED_RATE)
result = CAR_BENEFIT
            ]]></field>
    </record>
    <record id="ke_rule39" model="hr.salary.rule">
      <field name="sequence">39</field>
      <field name="code">P039</field>
      <field name="name">Housing</field>
      <field name="category_id" ref="ke_category36"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.house ##compute only if employee has house benefit
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
### INITIALIZE VARAIBLES###
BASIC_SALARY = payslip.paid_amount
NORMAL_PERCENTAGE = 0.15
AGRI_PERCENTAGE = 0.10
ACTUAL_RENT = contract.rent
RENT_RECOVERED = contract.rent_recovered
TOTAL_EARNINGS = 0

if contract.house and contract.house_type in ['own', 'rented']:
    COMPUTED_TAXABLE_VALUE = (BASIC_SALARY  + categories.CASH_ALW + categories.BENEFITS) * NORMAL_PERCENTAGE
    result = max(ACTUAL_RENT, COMPUTED_TAXABLE_VALUE) - RENT_RECOVERED

elif contract.house and contract.house_type == 'agri':
    COMPUTED_TAXABLE_VALUE = (BASIC_SALARY  + TOTAL_EARNINGS) * AGRI_PERCENTAGE
    result = COMPUTED_TAXABLE_VALUE - RENT_RECOVERED
else:
   result = 0.0
            ]]></field>
    </record>
    <record id="ke_rule40" model="hr.salary.rule">
      <field name="sequence">40</field>
      <field name="code">P040</field>
      <field name="name">Total Housing and Motor vehicle</field>
      <field name="category_id" ref="ke_category8"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.house or contract.car  ##compute only if employee has house or car benefit
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C036 ##Special category for Housing and Car benefit rule
            ]]></field>
    </record>
    <record id="ke_rule41" model="hr.salary.rule">
      <field name="sequence">41</field>
      <field name="code">P041</field>
      <field name="name">Gross Taxable Income</field>
      <field name="category_id" ref="ke_category9"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = True
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
## Gross taxable income is the Sum of Gross pay + Housing and Motor vehicle + other Non Cash Benefits if exceeds 3000 KSH
result = categories.C006 + categories.C036 + (categories.C007 > 3000 and categories.C007 or 0.0 )
            ]]></field>
    </record>
    <record id="ke_rule42" model="hr.salary.rule">
      <field name="sequence">42</field>
      <field name="code">P042</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category9"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule43" model="hr.salary.rule">
      <field name="sequence">43</field>
      <field name="code">P043</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category9"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule44" model="hr.salary.rule">
      <field name="sequence">44</field>
      <field name="code">P044</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category9"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule45" model="hr.salary.rule">
      <field name="sequence">45</field>
      <field name="code">P045</field>
      <field name="name">Gross Taxable Pay</field>
      <field name="category_id" ref="ke_category10"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C009
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C009
            ]]></field>
    </record>
    <record id="ke_rule46" model="hr.salary.rule">
      <field name="sequence">46</field>
      <field name="code">P046</field>
      <field name="name">NSSF Tier I</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
#######
nssf = 0.0
### Calculation of NSSF Tier I Employer Contribution based on Gross Pay###
if employee.resident:
    TIER1_RATE = 0.06
    LEL = 6000
    PAY = categories.C006
    if PAY <= LEL:
        nssf = round(TIER1_RATE * PAY)
    elif PAY > LEL:
        nssf = round(TIER1_RATE * LEL)
result = nssf
            ]]></field>
    </record>
    <record id="ke_rule47" model="hr.salary.rule">
      <field name="sequence">47</field>
      <field name="code">P047</field>
      <field name="name">NSSF Tier II</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
#######
nssf = 0.0
### Calculation of NSSF Tier II Contribution based on Gross Pay###
if employee.resident:
    TIER2_RATE = 0.06
    LEL = 6000
    UEL = 18000
    PAY = categories.C006
    if PAY > LEL and PAY <= UEL:
        nssf = round(TIER2_RATE* (PAY - LEL))
    elif PAY > UEL:
        nssf = round(TIER2_RATE* (UEL - LEL))
result = nssf

            ]]></field>
    </record>
    <record id="ke_rule48" model="hr.salary.rule">
      <field name="sequence">48</field>
      <field name="code">P048</field>
      <field name="name">NSSF Tier III</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.nssf_t3
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule49" model="hr.salary.rule">
      <field name="sequence">49</field>
      <field name="code">P049</field>
      <field name="name">NSSF Voluntary Contributions</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.nssf_vol
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = employee.nssf_vol_mem
            ]]></field>
    </record>
    <record id="ke_rule50" model="hr.salary.rule">
      <field name="sequence">50</field>
      <field name="code">P050</field>
      <field name="name">NSSF (Employee)</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

#OLD NSSF rates are deactivated by default. To ativate it, please set 'result= employee.resident' below
# Note: returned value have to be set in the variable 'result'
#result = employee.resident
result = False

            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
NSSF = 0.0
### Calculation of NSSF Employee Contribution based the OLD rates###
if employee.resident:
    MAXIMUM_CONTRIBUTIONS = 400
    NSSF_RATE = 0.05
    PAY = categories.C006
    NSSF = round(NSSF_RATE * PAY)
    NSSF = min(NSSF, MAXIMUM_CONTRIBUTIONS)
result = 0.5 * NSSF
            ]]></field>
    </record>
    <record id="ke_rule51" model="hr.salary.rule">
      <field name="sequence">51</field>
      <field name="code">P051</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'
result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule52" model="hr.salary.rule">
      <field name="sequence">52</field>
      <field name="code">P052</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule53" model="hr.salary.rule">
      <field name="sequence">53</field>
      <field name="code">P053</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule54" model="hr.salary.rule">
      <field name="sequence">54</field>
      <field name="code">P054</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category11"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule55" model="hr.salary.rule">
      <field name="sequence">55</field>
      <field name="code">P055</field>
      <field name="name">Total NSSF</field>
      <field name="category_id" ref="ke_category12"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and categories.C011
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C011
            ]]></field>
    </record>
    <record id="ke_rule56" model="hr.salary.rule">
      <field name="sequence">56</field>
      <field name="code">P056</field>
      <field name="name">NSSF Tier I - Employer</field>
      <field name="struct_id">2</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
#######
nssf = 0.0
### Calculation of NSSF Tier I Employer Contribution based on Gross Pay###
if employee.resident:
    TIER1_RATE = 0.06
    LEL = 6000
    PAY = categories.C006
    if PAY <= LEL:
        nssf = round(TIER1_RATE * PAY)
    elif PAY > LEL:
        nssf = round(TIER1_RATE * LEL)
result = nssf

            ]]></field>
    </record>
    <record id="ke_rule57" model="hr.salary.rule">
      <field name="sequence">57</field>
      <field name="code">P057</field>
      <field name="name">NSSF Tier II - Employer</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
#######
nssf = 0.0
### Calculation of NSSF Tier II Contribution based on Gross Pay###
if employee.resident:
    TIER2_RATE = 0.06
    LEL = 6000
    UEL = 18000
    PAY = categories.C006
    if PAY > LEL and PAY <= UEL:
        nssf = round(TIER2_RATE* (PAY - LEL))
    elif PAY > UEL:
        nssf = round(TIER2_RATE* (UEL - LEL))
result = nssf
            ]]></field>
    </record>
    <record id="ke_rule58" model="hr.salary.rule">
      <field name="sequence">58</field>
      <field name="code">P058</field>
      <field name="name">NSSF Tier III - Employer</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.nssf_t3
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = employee.nssf_t3_emp
            ]]></field>
    </record>
    <record id="ke_rule59" model="hr.salary.rule">
      <field name="sequence">59</field>
      <field name="code">P059</field>
      <field name="name">NSSF Voluntary Contributions - Employer</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.nssf_vol
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = employee.nssf_vol_emp
            ]]></field>
    </record>
    <record id="ke_rule60" model="hr.salary.rule">
      <field name="sequence">60</field>
      <field name="code">P060</field>
      <field name="name">NSSF (Employer)</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

#OLD NSSF rates are deactivated by default. To ativate it, please set 'result= employee.resident' below
# Note: returned value have to be set in the variable 'result'

#result = employee.resident
result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

### Calculation of NSSF Employer Contribution based the OLD rates###
### Employer contributes exact same amount as the employee###
### Calculation of NSSF Employer Contribution based the OLD rates###
NSSF = 0.0
if employee.resident:
    MAXIMUM_CONTRIBUTIONS = 400
    NSSF_RATE = 0.05
    PAY = categories.C006
    NSSF = round(NSSF_RATE * PAY)
    NSSF = min(NSSF, MAXIMUM_CONTRIBUTIONS)
result = 0.5 * NSSF
            ]]></field>
    </record>
    <record id="ke_rule61" model="hr.salary.rule">
      <field name="sequence">61</field>
      <field name="code">P061</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule62" model="hr.salary.rule">
      <field name="sequence">62</field>
      <field name="code">P062</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule63" model="hr.salary.rule">
      <field name="sequence">63</field>
      <field name="code">P063</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule64" model="hr.salary.rule">
      <field name="sequence">64</field>
      <field name="code">P064</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category13"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule65" model="hr.salary.rule">
      <field name="sequence">65</field>
      <field name="code">P065</field>
      <field name="name">Total NSSF Contributions -Employer</field>
      <field name="struct_id">2</field>
      <field name="category_id" ref="ke_category14"/>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C013
            ]]></field>
    </record>
    <record id="ke_rule66" model="hr.salary.rule">
      <field name="sequence">66</field>
      <field name="code">P066</field>
      <field name="name">Pension/Provident Fund Scheme</field>
      <field name="category_id" ref="ke_category15"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.pension ##compute only if employee is contibuting to personal pension/provident Fund
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
PERMISSIBLE_LIMIT = 20000 - categories.C012
PERCENTAGE = 0.3
GROSS_PAY = categories.C006
ACTUAL_CONTIBUTION = 0.0
if employee.pension and employee.resident and employee.emp_type == 'primary':
    ACTUAL_CONTIBUTION = employee.pen_contrib
result = min(ACTUAL_CONTIBUTION, PERMISSIBLE_LIMIT, PERCENTAGE * GROSS_PAY)
            ]]></field>
    </record>
    <record id="ke_rule67" model="hr.salary.rule">
      <field name="sequence">67</field>
      <field name="code">P067</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category15"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule68" model="hr.salary.rule">
      <field name="sequence">68</field>
      <field name="code">P068</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category15"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule69" model="hr.salary.rule">
      <field name="sequence">69</field>
      <field name="code">P069</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category15"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule70" model="hr.salary.rule">
      <field name="sequence">70</field>
      <field name="code">P070</field>
      <field name="name">Total Pension/Provident Fund</field>
      <field name="category_id" ref="ke_category16"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.pension and categories.C015 ##compute only if employee is contibuting to personal pension/provident Fund
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C015
            ]]></field>
    </record>
    <record id="ke_rule71" model="hr.salary.rule">
      <field name="sequence">71</field>
      <field name="code">P071</field>
      <field name="name">H.O.S.P</field>
      <field name="category_id" ref="ke_category17"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.hosp ##compute only if employee is subscribed to H.O.S.P
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
HOSP_LIMIT = 4000
ACTUAL_DEPOSIT = 0.0
if employee.hosp and employee.emp_type == 'primary':
   ACTUAL_DEPOSIT = employee.hosp_deposit
###For HOSP, the lesser of the prescribed limit or the actual contribution to HOSP is taken as the allowed deduction####
result = min(HOSP_LIMIT, ACTUAL_DEPOSIT)
            ]]></field>
    </record>
    <record id="ke_rule72" model="hr.salary.rule">
      <field name="sequence">72</field>
      <field name="code">P072</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category17"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule73" model="hr.salary.rule">
      <field name="sequence">73</field>
      <field name="code">P073</field>
      <field name="name">Mortgage Interest</field>
      <field name="category_id" ref="ke_category18"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.mortgage ##compute only if employee is paying Mortgage Interest
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
MI_LIMIT = 25000 ##Per month
ACTUAL_INTEREST = 0.0
if employee.mortgage and employee.emp_type == 'primary':
    ACTUAL_INTEREST = employee.mortgage_interest
###For OCI , the lesser of the actual interest paid or the prescribed limit is taken as the allowed deduction####
result = min(MI_LIMIT, ACTUAL_INTEREST)

            ]]></field>
    </record>
    <record id="ke_rule74" model="hr.salary.rule">
      <field name="sequence">74</field>
      <field name="code">P074</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category18"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule75" model="hr.salary.rule">
      <field name="sequence">75</field>
      <field name="code">P075</field>
      <field name="name">H.O.S.P or Mortgage Interest Deducted</field>
      <field name="category_id" ref="ke_category19"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.mortgage ##compute only if employee has house benefit
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = max(categories.C017, categories.C018)
            ]]></field>
    </record>
    <record id="ke_rule76" model="hr.salary.rule">
      <field name="sequence">76</field>
      <field name="code">P076</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category20"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule77" model="hr.salary.rule">
      <field name="sequence">77</field>
      <field name="code">P077</field>
      <field name="name">PWD Deductions</field>
      <field name="category_id" ref="ke_category20"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.disability
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
EXEMPTION = 150000
ADDITIONAL_EXEMPTION = 0
MAX_ADD_EXEMPTION = 50000
if employee.disability:
   ADDITIONAL_EXEMPTION = employee.disability_rate
result = EXEMPTION + min(MAX_ADD_EXEMPTION, ADDITIONAL_EXEMPTION)
            ]]></field>
    </record>
    <record id="ke_rule78" model="hr.salary.rule">
      <field name="sequence">78</field>
      <field name="code">P078</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category20"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule79" model="hr.salary.rule">
      <field name="sequence">79</field>
      <field name="code">P079</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category20"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule80" model="hr.salary.rule">
      <field name="sequence">80</field>
      <field name="code">P080</field>
      <field name="name">Total Allowed Deductions</field>
      <field name="category_id" ref="ke_category21"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C020
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C020 ##Allowed deductions Category
            ]]></field>
    </record>
    <record id="ke_rule81" model="hr.salary.rule">
      <field name="sequence">81</field>
      <field name="code">P081</field>
      <field name="name">Taxable Pay</field>
      <field name="category_id" ref="ke_category22"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = True
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
taxable = categories.C010 - categories.C021 ##Gross taxable - total allowed deductions
result = max(0, taxable) ##for negative result, set taxable pay = 0

            ]]></field>
    </record>
    <record id="ke_rule82" model="hr.salary.rule">
      <field name="sequence">82</field>
      <field name="code">P082</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category22"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule83" model="hr.salary.rule">
      <field name="sequence">83</field>
      <field name="code">P083</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category22"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule84" model="hr.salary.rule">
      <field name="sequence">84</field>
      <field name="code">P084</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category22"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule85" model="hr.salary.rule">
      <field name="sequence">85</field>
      <field name="code">P085</field>
      <field name="name">Net Taxable Pay</field>
      <field name="category_id" ref="ke_category23"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C022
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C022
            ]]></field>
    </record>
    <record id="ke_rule86" model="hr.salary.rule">
      <field name="sequence">86</field>
      <field name="code">P086</field>
      <field name="name">P.A.Y.E</field>
      <field name="category_id" ref="ke_category24"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.tax_applicable in ['paye'] ####NOTE: valid words are [paye,wht]
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
#round_up = lambda x: int(x + 1) if int(x) != x else int(x)
#min_taxable = KES 13,486.00 per month
first_margin= 12298
first_rate = 0.10
second_margin = 23885
second_rate = 0.15
third_margin = 35472
third_rate = 0.20
fourth_margin = 47059
fourth_rate = 0.25
fifth_rate = 0.30
TAXABLE = categories.C023 ## Taxable Pay
if TAXABLE <= first_margin:
    tax = (first_rate * TAXABLE)
elif TAXABLE <= second_margin and TAXABLE > first_margin :
    tax = ((first_rate * first_margin) + (second_rate * (TAXABLE- first_margin)))
elif TAXABLE <= third_margin and TAXABLE > second_margin :
    tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (TAXABLE - second_margin)))
elif TAXABLE <= fourth_margin and TAXABLE > third_margin :
    tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (third_margin - second_margin)) + (fourth_rate * (TAXABLE - third_margin)))
elif TAXABLE > fourth_margin :
     tax = ((first_rate * first_margin) + (second_rate * (second_margin - first_margin)) + (third_rate * (third_margin - second_margin)) + (fourth_rate * (fourth_margin - third_margin)) + (fifth_rate *   (TAXABLE-fourth_margin)))
else:
    tax = 0.0
#result = round_up(tax)
result = tax

            ]]></field>
    </record>
    <record id="ke_rule87" model="hr.salary.rule">
      <field name="sequence">87</field>
      <field name="code">P087</field>
      <field name="name">W.H.T</field>
      <field name="category_id" ref="ke_category24"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.tax_applicable  in ['wht'] ##valid words are [paye,wht]
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
if employee.resident:
    WHT_RATE = 0.05
else:
    WHT_RATE = 0.15
MIN_LIMIT = 24000
TAXABLE = categories.C023 ## Taxable Pay
#round_up = lambda x: int(x + 1) if int(x) != x else int(x)
if  TAXABLE > MIN_LIMIT:
    result = WHT_RATE * TAXABLE
else:
    result = 0

            ]]></field>
    </record>
    <record id="ke_rule88" model="hr.salary.rule">
      <field name="sequence">88</field>
      <field name="code">P088</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category24"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule89" model="hr.salary.rule">
      <field name="sequence">89</field>
      <field name="code">P089</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category24"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule90" model="hr.salary.rule">
      <field name="sequence">90</field>
      <field name="code">P090</field>
      <field name="name">Tax Payable</field>
      <field name="category_id" ref="ke_category25"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C024
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C024
            ]]></field>
    </record>
    <record id="ke_rule91" model="hr.salary.rule">
      <field name="sequence">91</field>
      <field name="code">P091</field>
      <field name="name">Personal Tax Relief</field>
      <field name="category_id" ref="ke_category26"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident and employee.emp_type == 'primary'
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
PERSONAL_RELIEF = 0.0
if employee.resident and employee.emp_type == 'primary' and categories.C024:
    PERSONAL_RELIEF = 1408.00
result = PERSONAL_RELIEF

            ]]></field>
    </record>
    <record id="ke_rule92" model="hr.salary.rule">
      <field name="sequence">92</field>
      <field name="code">P092</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category26"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule93" model="hr.salary.rule">
      <field name="sequence">93</field>
      <field name="code">P093</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category26"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule94" model="hr.salary.rule">
      <field name="sequence">94</field>
      <field name="code">P094</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category26"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule95" model="hr.salary.rule">
      <field name="sequence">95</field>
      <field name="code">P095</field>
      <field name="name">Tax Relief </field>
      <field name="category_id" ref="ke_category27"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C026
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C026
            ]]></field>
    </record>
    <record id="ke_rule96" model="hr.salary.rule">
      <field name="sequence">96</field>
      <field name="code">P096</field>
      <field name="name">Insurance Relief</field>
      <field name="category_id" ref="ke_category28"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.reliefs.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
PERCENTAGE = 0.15
PRESCRIBED_LIMIT = 3000
COMPUTED_RELIEF = PERCENTAGE * sum([x.amount for x in employee.reliefs.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])

###For Insurance relief, the lesser of the 15% of the (actual Insurance premium) and (the prescribed limit of 3000)  shall be deducted from PAYE####
if employee.resident:
    result = min(PRESCRIBED_LIMIT, COMPUTED_RELIEF)
else:
    result = 0.0
            ]]></field>
    </record>
    <record id="ke_rule97" model="hr.salary.rule">
      <field name="sequence">97</field>
      <field name="code">P097</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category28"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule98" model="hr.salary.rule">
      <field name="sequence">98</field>
      <field name="code">P098</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category28"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule99" model="hr.salary.rule">
      <field name="sequence">99</field>
      <field name="code">P099</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category28"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule100" model="hr.salary.rule">
      <field name="sequence">100</field>
      <field name="code">P100</field>
      <field name="name">Total Insurance Relief</field>
      <field name="category_id" ref="ke_category29"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C028
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C028
            ]]></field>
    </record>
    <record id="ke_rule101" model="hr.salary.rule">
      <field name="sequence">101</field>
      <field name="code">P101</field>
      <field name="name">Net P.A.Y.E</field>
      <field name="category_id" ref="ke_category30"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = contract.schedule_pay in ['monthly']
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
net_tax = categories.C025 - categories.C027 - categories.C029 ##Total tax payable - personal relief - insrurance relief
result = max(0, net_tax)  ##if net tax is negative, set result = 0
            ]]></field>
    </record>
    <record id="ke_rule102" model="hr.salary.rule">
      <field name="sequence">102</field>
      <field name="code">P102</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category30"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule103" model="hr.salary.rule">
      <field name="sequence">103</field>
      <field name="code">P103</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category30"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule104" model="hr.salary.rule">
      <field name="sequence">104</field>
      <field name="code">P104</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category30"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule105" model="hr.salary.rule">
      <field name="sequence">105</field>
      <field name="code">P105</field>
      <field name="name">Net Tax Payable</field>
      <field name="category_id" ref="ke_category31"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C030
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C030
            ]]></field>
    </record>
    <record id="ke_rule106" model="hr.salary.rule">
      <field name="sequence">106</field>
      <field name="code">P106</field>
      <field name="name">N.H.I.F</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.resident
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

#NHIF Upper limits and Contributions
MARGIN1 = 5999;                 CONTRIB1 = 150
MARGIN2 = 7999;                 CONTRIB2 = 300
MARGIN3 = 11999;        CONTRIB3 = 400
MARGIN4 = 14999;        CONTRIB4 = 500
MARGIN5 = 19999;                CONTRIB5 = 600
MARGIN6 = 24999;        CONTRIB6 = 750
MARGIN7 = 29999;        CONTRIB7 = 850
MARGIN8 = 34999;        CONTRIB8 = 900
MARGIN9 = 39999;        CONTRIB9 = 950
MARGIN10 = 44999;       CONTRIB10 = 1000
MARGIN11 = 49999;       CONTRIB11 = 1100
MARGIN12 = 59999;       CONTRIB12 = 1200
MARGIN13 = 69999;       CONTRIB13 = 1300
MARGIN14 = 79999;       CONTRIB14 = 1400
MARGIN15 = 89999;       CONTRIB15 = 1500
MARGIN16 = 99999;       CONTRIB16 = 1600;
PAY = categories.C006 ## Gross Pay
CONTRIB17 = 1700

###### Calculation of NHIF contribution based on the maximum pay###
if PAY and PAY <= MARGIN1: nhif = CONTRIB1
elif PAY <= MARGIN2 and PAY > MARGIN1: nhif = CONTRIB2
elif PAY <= MARGIN3 and PAY > MARGIN2: nhif = CONTRIB3
elif PAY <= MARGIN4 and PAY > MARGIN3: nhif = CONTRIB4
elif PAY <= MARGIN5 and PAY > MARGIN4: nhif = CONTRIB5
elif PAY <= MARGIN6 and PAY > MARGIN5: nhif = CONTRIB6
elif PAY <= MARGIN7 and PAY > MARGIN6: nhif = CONTRIB7
elif PAY <= MARGIN8 and PAY > MARGIN7: nhif = CONTRIB8
elif PAY <= MARGIN9 and PAY > MARGIN8: nhif = CONTRIB9
elif PAY <= MARGIN10 and PAY > MARGIN9: nhif = CONTRIB10
elif PAY <= MARGIN11 and PAY > MARGIN10: nhif = CONTRIB11
elif PAY <= MARGIN12 and PAY > MARGIN11: nhif = CONTRIB12
elif PAY <= MARGIN13 and PAY > MARGIN12: nhif = CONTRIB13
elif PAY <= MARGIN14 and PAY > MARGIN13: nhif = CONTRIB14
elif PAY <= MARGIN15 and PAY > MARGIN14: nhif = CONTRIB15
elif PAY <= MARGIN16 and PAY > MARGIN15: nhif = CONTRIB16
elif PAY > MARGIN16: nhif = CONTRIB17
else: nhif = 0
result = nhif
            ]]></field>
    </record>
    <record id="ke_rule107" model="hr.salary.rule">
      <field name="sequence">107</field>
      <field name="code">P107</field>
      <field name="name">H.E.L.B</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = employee.helb ##compute if Employee is paying H.E.L.B
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = employee.helb_rate
            ]]></field>
    </record>
    <record id="ke_rule108" model="hr.salary.rule">
      <field name="sequence">108</field>
      <field name="code">P108</field>
      <field name="name">Salary Advance</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule109" model="hr.salary.rule">
      <field name="sequence">109</field>
      <field name="code">P109</field>
      <field name="name">SACCO</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule110" model="hr.salary.rule">
      <field name="sequence">110</field>
      <field name="code">P110</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule111" model="hr.salary.rule">
      <field name="sequence">111</field>
      <field name="code">P111</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule112" model="hr.salary.rule">
      <field name="sequence">112</field>
      <field name="code">P112</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule113" model="hr.salary.rule">
      <field name="sequence">113</field>
      <field name="code">P113</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule114" model="hr.salary.rule">
      <field name="sequence">114</field>
      <field name="code">P114</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category32"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = any(employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)]))
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'

result = sum([x.amount for x in employee.deductions.search([('rule_id', '=',  rule.id), ('employee_id', '=', employee.id)])])
            ]]></field>
    </record>
    <record id="ke_rule115" model="hr.salary.rule">
      <field name="sequence">115</field>
      <field name="code">P115</field>
      <field name="name">Total Post-Tax Deductions</field>
      <field name="category_id" ref="ke_category33"/>
      <field name="struct_id">2</field> 
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C032
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C032
            ]]></field>
    </record>
    <record id="ke_rule116" model="hr.salary.rule">
      <field name="sequence">116</field>
      <field name="code">P116</field>
      <field name="name">Net Pay</field>
      <field name="category_id" ref="ke_category34"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="False"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = True
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
##Gross Pay - Total Net Tax - Total post tax Deductions(NHIF,HELB,SACCO) - NSSF Contributions
result = result = categories.C006 - categories.C031 - categories.C033 - categories.C012

            ]]></field>
    </record>
    <record id="ke_rule117" model="hr.salary.rule">
      <field name="sequence">117</field>
      <field name="code">P117</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category34"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule118" model="hr.salary.rule">
      <field name="sequence">118</field>
      <field name="code">P118</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category34"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule119" model="hr.salary.rule">
      <field name="sequence">119</field>
      <field name="code">P119</field>
      <field name="name">FOR FUTURE USE</field>
      <field name="category_id" ref="ke_category34"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = False
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = 0
            ]]></field>
    </record>
    <record id="ke_rule120" model="hr.salary.rule">
      <field name="sequence">120</field>
      <field name="code">P120</field>
      <field name="name">Net Pay</field>
      <field name="category_id" ref="ke_category35"/>
      <field name="struct_id">2</field>
      <field name="active" eval="True"/>
      <field name="appears_on_payslip" eval="True"/>
      <field name="condition_select">python</field>
      <field name="condition_python"><![CDATA[
# Available variables:
#----------------------
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days
# inputs: object containing the computed inputs

# Note: returned value have to be set in the variable 'result'

result = categories.C034
            ]]></field>
      <field name="amount_select">code</field>
      <field name="amount_python_compute"><![CDATA[
# Available variables:
# payslip: object containing the payslips
# employee: hr.employee object
# contract: hr.contract object
# rules: object containing the rules code (previously computed)
# rule: object containing the current rule being computed
# categories: object containing the computed salary rule categories (sum of amount of all rules belonging to that category).
# worked_days: object containing the computed worked days.
# inputs: object containing the computed inputs.
# Note: returned value have to be set in the variable 'result'
result = categories.C034
            ]]></field>
    </record>
  </data>
</openerp>
